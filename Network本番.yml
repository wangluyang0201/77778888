AWSTemplateFormatVersion: "2010-09-09"
Description: 
  VPC Create
  Subnet Create
  Routetable Create
  NetworkACL Create
  SecurityGroup Create
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Project Name Prefix"
        Parameters: 
          - PJPrefix
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCCIDR
          - ElasticSearchSubnetACIDR
          - ElasticSearchSubnetCCIDR
          - ElasticSearchSubnetDCIDR
          - LambdaSubnetACIDR
          - LambdaSubnetCCIDR
          - LambdaSubnetDCIDR
          - DatabaseSubnetACIDR
          - DatabaseSubnetCCIDR
    ParameterLabels: 
      PJPrefix: 
        default: "PJPrefix"
      VPCCIDR: 
        default: "VPC CIDR"
      ElasticSearchSubnetACIDR: 
        default: "ElasticSearchSubnetA CIDR"
      ElasticSearchSubnetCCIDR: 
        default: "ElasticSearchSubnetC CIDR"
      ElasticSearchSubnetDCIDR: 
        default: "ElasticSearchSubnetD CIDR"
      LambdaSubnetACIDR: 
        default: "LambdaSubnetA CIDR"
      LambdaSubnetCCIDR: 
        default: "LambdaSubnetC CIDR"
      LambdaSubnetDCIDR: 
        default: "LambdaSubnetD CIDR"
      DatabaseSubnetACIDR: 
        default: "DatabaseSubnetA CIDR"
      DatabaseSubnetCCIDR: 
        default: "DatabaseSubnetC CIDR"

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  PJPrefix:
    Type: String
    Default: "test"

  VPCCIDR:
    Type: String
    Default: "10.1.0.0/16"

  ElasticSearchSubnetACIDR:
    Type: String
    Default: "10.1.10.0/24"

  ElasticSearchSubnetCCIDR:
    Type: String
    Default: "10.1.20.0/24"

  ElasticSearchSubnetDCIDR:
    Type: String
    Default: "10.1.30.0/24"

  LambdaSubnetACIDR:
    Type: String
    Default: "10.1.40.0/24"

  LambdaSubnetCCIDR:
    Type: String
    Default: "10.1.50.0/24"

  LambdaSubnetDCIDR:
    Type: String
    Default: "10.1.60.0/24" 

  DatabaseSubnetACIDR:
    Type: String
    Default: "10.1.100.0/24"
    
  DatabaseSubnetCCIDR:
    Type: String
    Default: "10.1.200.0/24"

Resources: 
# ------------------------------------------------------------#
#  VPC
# ------------------------------------------------------------#
# VPC Create
  VPC: 
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-vpc"
# ------------------------------------------------------------#
#  Subnet
# ------------------------------------------------------------#          
# ElasticSearch SubnetA Create
  ElasticSearchSubnetA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref ElasticSearchSubnetACIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-ES-subnet-a"

# ElasticSearch SubnetC Create
  ElasticSearchSubnetC: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref ElasticSearchSubnetCCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-ES-subnet-c"

# ElasticSearch SubnetD Create
  ElasticSearchSubnetD: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1d"
      CidrBlock: !Ref ElasticSearchSubnetDCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-ES-subnet-d"

# Lambda SubnetA Create
  LambdaSubnetA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref LambdaSubnetACIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-Lambda-subnet-a"

# Lambda SubnetC Create
  LambdaSubnetC: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref LambdaSubnetCCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-Lambda-subnet-c"

# Lambda SubnetD Create
  LambdaSubnetD: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1d"
      CidrBlock: !Ref LambdaSubnetDCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-Lambda-subnet-d"

# Database SubnetA Create
  DatabaseSubnetA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref DatabaseSubnetACIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-DB-subnet-a"

# Database SubnetC Create
  DatabaseSubnetC: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref DatabaseSubnetCCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-DB-subnet-c"

# ------------------------------------------------------------#
#  RouteTable
# ------------------------------------------------------------#          
# RouteTable Create
  RouteTable: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-route"

# ------------------------------------------------------------#
# RouteTable Associate
# ------------------------------------------------------------# 
# RouteTable Associate ESSubnetA ESSubnetC ESSubnetD
  ElasticSearchSubnetARouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref ElasticSearchSubnetA
      RouteTableId: !Ref RouteTable

  ElasticSearchSubnetCRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref ElasticSearchSubnetC
      RouteTableId: !Ref RouteTable

  ElasticSearchSubnetDRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref ElasticSearchSubnetD
      RouteTableId: !Ref RouteTable

# RouteTable Associate LambdaSubnetA LambdaSubnetC LambdaSubnetD
  LambdaRouteTableAAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref LambdaSubnetA
      RouteTableId: !Ref RouteTable

  LambdaRouteTableCAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId:  !Ref LambdaSubnetC
      RouteTableId: !Ref RouteTable

  LambdaRouteTableDAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref LambdaSubnetD
      RouteTableId: !Ref RouteTable

# RouteTable Associate DBSubnetA DBSubnetC
  DatabaseSubnetARouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref DatabaseSubnetA
      RouteTableId: !Ref RouteTable

  DatabaseSubnetCRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref DatabaseSubnetC
      RouteTableId: !Ref RouteTable

# ------------------------------------------------------------#
# NACL Create
# ------------------------------------------------------------# 
  ElasticSearchNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${PJPrefix}-ES-nacl

  LambdaNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${PJPrefix}-Lambda-nacl

  DatabaseNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${PJPrefix}-DB-nacl

# Nacl Associate Subnet
  NaclAssocESA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref ElasticSearchNacl
      SubnetId: !Ref ElasticSearchSubnetA

  NaclAssocESC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref ElasticSearchNacl
      SubnetId: !Ref ElasticSearchSubnetC


  NaclAssocESD:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref ElasticSearchNacl
      SubnetId: !Ref ElasticSearchSubnetD


  NaclAssocLambdaA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref LambdaNacl
      SubnetId: !Ref LambdaSubnetA

  NaclAssocLambdaC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref LambdaNacl
      SubnetId: !Ref LambdaSubnetC

  NaclAssocLambdaD:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref LambdaNacl
      SubnetId: !Ref LambdaSubnetD

  NaclAssocDBA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref DatabaseNacl
      SubnetId: !Ref DatabaseSubnetA

  NaclAssocDBC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref DatabaseNacl
      SubnetId: !Ref DatabaseSubnetC

# ElasticSearchNacl Inbound And Outbound
  ESInbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetACIDR
      NetworkAclId: !Ref ElasticSearchNacl

  ESInbound110:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 110
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetCCIDR
      NetworkAclId: !Ref ElasticSearchNacl

  ESInbound120:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 120
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetDCIDR
      NetworkAclId: !Ref ElasticSearchNacl

  ESOutbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetACIDR
      NetworkAclId: !Ref ElasticSearchNacl

  ESOutbound110:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 110
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetCCIDR
      NetworkAclId: !Ref ElasticSearchNacl

  ESOutbound120:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 120
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetDCIDR
      NetworkAclId: !Ref ElasticSearchNacl



# Lambda Inbound And Outbound
  LambdaInbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref ElasticSearchSubnetACIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaInbound110:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 110
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref ElasticSearchSubnetCCIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaInbound120:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 120
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref ElasticSearchSubnetDCIDR
      NetworkAclId: !Ref LambdaNacl
      
  LambdaInbound130:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 130
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref DatabaseSubnetACIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaInbound140:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 140
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref DatabaseSubnetCCIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaOutbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref ElasticSearchSubnetACIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaOutbound110:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 110
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref ElasticSearchSubnetCCIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaOutbound120:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 120
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref ElasticSearchSubnetDCIDR
      NetworkAclId: !Ref LambdaNacl
      
  LambdaOutbound130:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 130
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref DatabaseSubnetACIDR
      NetworkAclId: !Ref LambdaNacl

  LambdaOutbound140:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 140
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref DatabaseSubnetCCIDR
      NetworkAclId: !Ref LambdaNacl

# DatabaseNacl Inbound And Outbound
  DBInbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetACIDR
      NetworkAclId: !Ref DatabaseNacl

  DBInbound2:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 110
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetCCIDR
      NetworkAclId: !Ref DatabaseNacl

  DBInbound3:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: false
      RuleNumber: 120
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetDCIDR
      NetworkAclId: !Ref DatabaseNacl

  DBOutbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetACIDR
      NetworkAclId: !Ref DatabaseNacl

  DBOutbound2:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 110
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetCCIDR
      NetworkAclId: !Ref DatabaseNacl

  DBOutbound3:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Egress: true
      RuleNumber: 120
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Ref LambdaSubnetDCIDR
      NetworkAclId: !Ref DatabaseNacl

# ------------------------------------------------------------#
# Security Group Create
# ------------------------------------------------------------# 
  ESSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LambdaSecurityGroup
    Properties:
      GroupDescription: ESSecurityGroup
      GroupName: ESSecurityGroup
      SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort : 9300
              ToPort : 9300
              SourceSecurityGroupId: !Ref LambdaSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "ESSecurityGroup"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LambdaSecurityGroup
      GroupName: LambdaSecurityGroup
      SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort : 0
              ToPort : 65535
              CidrIp: !Ref VPCCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "LambdaSecurityGroup"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LambdaSecurityGroup
    Properties:
      GroupDescription: DBSecurityGroup
      GroupName: DBSecurityGroup
      SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort : 3306
              ToPort : 3306
              SourceSecurityGroupId: !Ref LambdaSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "DBSecurityGroup"
# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#                
Outputs:
# VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${PJPrefix}-vpc"

  VPCCIDR:
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub "${PJPrefix}-vpc-cidr"

# Subnet
  ElasticSearchSubnetA:
    Value: !Ref ElasticSearchSubnetA
    Export:
      Name: !Sub "${PJPrefix}-ES-subnet-a"

  ElasticSearchSubnetACIDR:
    Value: !Ref ElasticSearchSubnetACIDR
    Export:
      Name: !Sub "${PJPrefix}-ES-subnet-a-cidr"

  ElasticSearchSubnetC:
    Value: !Ref ElasticSearchSubnetC
    Export:
      Name: !Sub "${PJPrefix}-ES-subnet-c"

  ElasticSearchSubnetCCIDR:
    Value: !Ref ElasticSearchSubnetCCIDR
    Export:
      Name: !Sub "${PJPrefix}-ES-subnet-c-cidr"

  ElasticSearchSubnetD:
    Value: !Ref ElasticSearchSubnetD
    Export:
      Name: !Sub "${PJPrefix}-ES-subnet-d"

  ElasticSearchSubnetDCIDR:
    Value: !Ref ElasticSearchSubnetDCIDR
    Export:
      Name: !Sub "${PJPrefix}-ES-subnet-d-cidr"

  LambdaSubnetA:
    Value: !Ref LambdaSubnetA
    Export:
      Name: !Sub "${PJPrefix}-Lambda-subnet-a"

  LambdaSubnetACIDR:
    Value: !Ref LambdaSubnetACIDR
    Export:
      Name: !Sub "${PJPrefix}-lambda-subnet-a-cidr"

  LambdaSubnetC:
    Value: !Ref LambdaSubnetC
    Export:
      Name: !Sub "${PJPrefix}-Lambda-subnet-c"

  LambdaSubnetCCIDR:
    Value: !Ref LambdaSubnetCCIDR
    Export:
      Name: !Sub "${PJPrefix}-Lambda-subnet-c-cidr"

  LambdaSubnetD:
    Value: !Ref LambdaSubnetD
    Export:
      Name: !Sub "${PJPrefix}-Lambda-subnet-d"

  LambdaSubnetDCIDR:
    Value: !Ref LambdaSubnetDCIDR
    Export:
      Name: !Sub "${PJPrefix}-Lambda-subnet-d-cidr"

  DatabaseSubnetA:
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub "${PJPrefix}-DB-subnet-a"

  DatabaseSubnetACIDR:
    Value: !Ref DatabaseSubnetACIDR
    Export:
      Name: !Sub "${PJPrefix}-DB-subnet-a-cidr"

  DatabaseSubnetC:
    Value: !Ref DatabaseSubnetC
    Export:
      Name: !Sub "${PJPrefix}-DB-subnet-c"

  DatabaseSubnetCCIDR:
    Value: !Ref DatabaseSubnetCCIDR
    Export:
      Name: !Sub "${PJPrefix}-DB-subnet-c-cidr"

# Route
  RouteTable:
    Value: !Ref RouteTable
    Export:
      Name: !Sub "${PJPrefix}-route"

# SecurityGroup
  ESSecurityGroup:
    Value: !Ref ESSecurityGroup
    Export:
      Name: !Sub "${PJPrefix}-ES-sg"

  LambdaSecurityGroup:
    Value: !Ref ESSecurityGroup
    Export:
      Name: !Sub "${PJPrefix}-Lambda-sg"

  DBSecurityGroupA:
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Sub "${PJPrefix}-DB-sg"
